generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model LinkProvider {
  id         String @id @default(uuid())
  providerId String @default("")
  provider   String @default("credential")
  userId     String
  user       User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@index([userId, provider, providerId])
}

enum Role {
  ADMIN
  MANAGER
  SALER
  BLOGER
  CUSTOMER
}

model User {
  id                       String         @id @default(uuid())
  email                    String         @unique
  emailVerified            Boolean        @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?        @unique
  username                 String
  picture                  String?
  password                 String?
  passwordResetToken       String?        @unique
  passwordResetExpires     DateTime? //4h
  role                     Role           @default(CUSTOMER)
  suspended                Boolean        @default(false)
  disabled                 Boolean        @default(false)
  reActiveToken            String?        @unique
  reActiveExpires          DateTime? //4h
  phone                    String?
  address                  String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  linkProviders            LinkProvider[]
  blogs                    Blog[]
  products                 Product[]

  @@index([email, emailVerificationToken, passwordResetToken, reActiveToken])
}

// Blog Model
model Blog {
  id          String   @id @default(uuid())
  title       String
  image       String
  slug        String   @unique
  contentJson String
  contentText String
  contentHTML String
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  isActive    Boolean  @default(true)
  publishAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([title, slug, tagId, authorId])
}

// Tag Model
model Tag {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  blog      Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, slug])
}

// Product Model
model Product {
  id          String   @id @default(uuid())
  images      String[]
  video       String?
  productName String
  slug        String   @unique
  code        String?  @unique
  description String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  benefits    String[]
  ingredients String[]
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  contentJson String
  contentHTML String
  contentText String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Category Model
model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name, slug])
}
