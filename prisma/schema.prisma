generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model OauthProvider {
  id         String   @id @default(uuid())
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([provider, providerId])
  @@index([userId, provider, providerId])
}

model TwoFA {
  id              String   @id @default(uuid())
  secretKey       String
  lastTwoFATime   DateTime @updatedAt
  backupCodes     String[]
  backupCodesUsed String[] @default([])
  userId          String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, backupCodes, backupCodesUsed])
}

enum Role {
  Admin
  Manager
  Saler
  Bloger
  Customer
}

enum Status {
  Active
  Suspended
  Disabled
}

model User {
  id                       String          @id @default(uuid())
  email                    String          @unique
  emailVerified            Boolean         @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?         @unique
  firstName                String
  lastName                 String
  picture                  String?
  hasPassword              Boolean         @default(false)
  password                 String?
  passwordResetToken       String?         @unique
  passwordResetExpires     DateTime? //4h
  twoFAEnabled             Boolean         @default(false)
  role                     Role            @default(Customer)
  status                   Status          @default(Active)
  reActiveToken            String?         @unique
  reActiveExpires          DateTime? //4h
  phone                    String?
  address                  String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  oauthProviders           OauthProvider[]
  posts                    Post[]
  products                 Product[]
  twoFAs                   TwoFA[]

  @@index([email, emailVerificationToken, passwordResetToken, reActiveToken])
}

// Post Model
model Post {
  id          String   @id @default(uuid())
  title       String
  image       String
  slug        String   @unique
  contentJson String
  contentText String
  contentHTML String
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  isActive    Boolean  @default(true)
  publishAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([title, slug, tagId, authorId])
}

// Tag Model
model Tag {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, slug])
}

// Product Model
model Product {
  id          String   @id @default(uuid())
  images      String[]
  video       String?
  productName String
  slug        String   @unique
  code        String?  @unique
  description String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  benefits    String[]
  ingredients String[]
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  contentJson String
  contentHTML String
  contentText String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Category Model
model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name, slug])
}
